// Ann Tupek
// CS681
// Project 2 Rough Draft
// Due 4/20/15
//
// Traffic simulation
// NEEDS A LOT OF WORK & MAJOR REFACTORING...
// TODO:*Add interactivity within the html (buttons for increasing traffic density, etc...)
//		*create driver rules
//		*figure out why the car on I83S moves backwards @ top of map...
//		*Refactor: finish creating segment paths & add boolean for occupied positions
//		*add in more cars & run them on the interchanges
//		*fix it so that when the cars go under the overpass, they don't get drawn
//		*if time permits, use a cool graphic for the cars instead of a red square.


/* @pjs preload = "Background.png"; */

PImage bg;

int[] i55Ex = {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60,
				64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 116, 120,
				124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168,
				172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216,
				220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264,
				268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312,
				316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360,
				364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408,
				412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456,
				460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504,
				508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 548, 552,
				556, 560, 564, 568, 572, 576, 580, 584, 588, 592, 596, 600,
				604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648,
				652, 656, 660, 664, 668, 672, 676, 680, 684, 688, 692, 696,
				700, 704, 708, 712, 716, 720, 724, 728, 732, 736, 740, 744,
				748, 752, 756, 760, 764, 768, 772, 776, 780, 784, 788, 792};

int[] i55Ey = {74, 76, 78, 80, 81, 83, 85, 87, 89, 91, 92, 93, 95, 
				97, 99, 101, 103, 105, 107, 109, 111, 113, 116, 118, 119, 
				121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 
				144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 168, 
				170, 172, 173, 175, 177, 178, 181, 183, 185, 187, 189, 191, 
				193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 215, 217, 
				220, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 244, 
				246, 248, 250, 253, 255, 256, 257, 259, 260, 262, 264, 266, 
				268, 274, 277, 279, 281, 283, 285, 287, 289, 292, 295, 297, 
				299, 301, 303, 305, 307, 309, 311, 313, 316, 318, 320, 322, 
				324, 328, 330, 332, 334, 336, 338, 340, 343, 345, 347, 349, 
				352, 355, 358, 361, 363, 366, 369, 370, 372, 374, 376, 380,
				384, 386, 390, 393, 395, 398, 401, 404, 407, 410, 412, 415,
				419, 423, 426, 429, 432, 435, 438, 441, 444, 447, 450, 453,
				456, 460, 464, 468, 473, 477, 480, 483, 487, 490, 493, 497,
				501, 505, 509, 513, 517, 521, 525, 529, 532, 536, 540, 544,
				548, 552, 556, 560, 564};

int[] i55Wx = {772, 768, 764, 760, 756, 752, 748, 744, 740, 736, 732, 728,
				724, 720, 716, 712, 708, 704, 700, 696, 692, 688, 684, 680,
				676, 672, 668, 664, 660, 656, 652, 648, 644, 640, 636, 632,
				628, 624, 620, 616, 612, 608, 604, 600, 596, 592, 588, 584,
				580, 576, 572, 568, 564, 560, 556, 552, 548, 544, 540, 536,
				532, 528, 524, 520, 516, 512, 508, 504, 500, 496, 492, 488,
				484, 480, 476, 472, 467, 464, 460, 456, 452, 448, 444, 440,
				436, 432, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392,
				388, 384, 380, 376, 372, 368, 364, 360, 356, 352, 348, 344,
				340, 336, 332, 328, 324, 320, 316, 312, 308, 304, 300, 296,
				292, 288, 284, 280, 276, 272, 268, 264, 260, 256, 252, 248,
				244, 240, 236, 232, 228, 224, 220, 216, 212, 208, 204, 200,
				196, 192, 188, 184, 180, 176, 172, 168, 164, 160, 156, 152, 
				148, 144, 140, 136, 132, 128, 124, 120, 116, 112, 108, 104,
				100, 96, 92, 88, 84, 80, 76, 72, 68, 64, 60, 56, 52, 48, 44,
				40, 36,	32, 28, 24, 20, 16, 12, 8, 4, 0};

int[] i55Wy = {563, 559, 555, 551, 547, 543, 539, 535, 531, 527, 524, 520, 
				517, 513, 509, 505, 501, 497, 494, 490, 486, 483, 480, 477, 
				474, 471, 468, 465, 461, 456, 452, 449, 446, 443, 440, 437, 
				434, 431, 428, 425, 422, 419, 416, 413, 410, 407, 404, 401, 
				399, 395, 392, 389, 387, 385, 381, 377, 375, 373, 371, 369, 
				367, 365, 363, 360, 358, 356, 354, 352, 349, 346, 343, 341, 
				338, 335, 332, 330, 328, 326, 324, 322, 321, 320, 318, 316, 
				312, 310, 308, 306, 304, 301, 299, 297, 295, 293, 291, 288, 
				286, 283, 281, 279, 277, 275, 273, 270, 268, 266, 264, 261, 
				259, 257, 255, 253, 251, 248, 246, 244, 242, 240, 237, 235, 
				233, 231, 229, 227, 225, 223, 221, 218, 215, 213, 211, 209, 
				207, 205, 203, 200, 198, 196, 194, 192, 189, 187, 185, 183, 
				181, 179, 177, 175, 173, 171, 170, 168, 166, 164, 162, 160, 
				158, 156, 154, 152, 150, 149, 147, 145, 143, 141, 139, 138, 
				136, 134, 132, 131, 129, 128, 126, 124, 122, 120, 118, 116, 
				114, 113, 111, 109, 107, 105, 103, 101, 99, 97, 95, 93, 91,
				89};

int[] i83Nx = {462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 
				462, 462, 462, 462, 462, 462, 462, 462, 461, 461, 461, 461, 
				461, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 
				460, 460, 460, 460, 459, 459, 459, 459, 459, 459, 459, 459, 
				459, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 
				457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 456, 456, 
				456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 
				456, 456, 456, 456, 456, 456, 455, 455, 455, 455, 455, 455, 
				455, 455, 455, 455, 454, 454, 454, 454, 454, 454, 454, 454, 
				454, 454, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 
				452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 451, 451, 
				451, 451, 451, 451, 451, 451, 451, 451, 450, 450, 450, 450};

int[] i83Ny = {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
				52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 
				100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 
				148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 
				196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 
				244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 284, 288, 
				292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 
				340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 
				388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 
				436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 
				484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 524, 528, 
				532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572};

int[] i83Sx = {435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 436, 436, 
				436, 436, 436, 436, 436, 436, 436, 436, 437, 437, 437, 437, 
				437, 437, 437, 437, 437, 437, 438, 438, 438, 438, 438, 438, 
				438, 438, 438, 438, 439, 439, 439, 439, 439, 439, 439, 439, 
				439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 
				440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 441, 441, 
				441, 441, 441, 441, 441, 441, 441, 441, 443, 443, 443, 443, 
				443, 443, 443, 443, 443, 443, 444, 444, 444, 444, 444, 444, 
				444, 444, 444, 444, 445, 445, 445, 445, 445, 445, 445, 445, 
				445, 445, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 
				447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 448, 448, 
				448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448};

int[] i83Sy = {572, 568, 564, 560, 556, 552, 548, 544, 540, 536, 532, 528, 
				524, 520, 516, 512, 508, 504, 500, 596, 492, 488, 484, 480, 
				476, 472, 468, 464, 460, 456, 452, 448, 444, 440, 436, 432, 
				428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 384, 
				380, 376, 372, 368, 364, 360, 356, 352, 348, 344, 340, 336, 
				332, 328, 324, 320, 316, 312, 308, 304, 300, 296, 292, 288, 
				284, 280, 276, 272, 268, 264, 260, 256, 252, 248, 244, 240, 
				236, 232, 228, 224, 220, 216, 212, 208, 204, 200, 196, 192, 
				188, 184, 180, 176, 172, 168, 164, 160, 156, 152, 148, 144, 
				140, 136, 132, 128, 124, 120, 116, 112, 108, 104, 100, 96, 
				92, 88, 84, 80, 76, 72, 68, 64, 60, 56, 52, 48, 44, 40, 36,
				32, 28, 24, 20, 16, 12, 8, 4, 0};

int[] i55e83sX = {176,180,184,188,192,196,200,204,208,212,216,256,296,300,
				304,332,344,352,360,368,380,392,400,412,420,428,432,440,444,447};

int[] i55e83sY = {156,157,158,159,161,163,164,166,168,169,171,187,205,205,
				205,205,203,200,197,194,188,180,173,161,151,140,130,112,98,92};

int[] i55e83nX = {296,300,304,332,352,372,376,380,384,400,420,436,468,484,500,
				520,524,536,544,552,554,556,556,556,554,550,540,532,524,516,
				504,496,488,480,472,468,464};

int[] i55e83nY = {205,209,212,231,244,256,258,259,260,270,281,290,308,316,318,
				318,317,312,306,293,286,280,273,266,258,250,239,234,230,228,
				228,230,234,240,250,260,453};

int[] i55w83nX = {724,720,716,708,696,684,668,652,640,628,612,608,604,596,588,
				564,556,544,528,516,500,488,484,476,472,468,464,460,459};

int[] i55w83nY = {525,523,520,514,504,494,482,470,460,451,439,437,436,433,432,
				432,434,437,444,450,462,472,476,485,491,497,506,515,520};

int[] i55w83sX = {608,604,596,588,564,532,528,524,512,500,492,467,436,424,420,
				412,404,400,392,384,372,364,356,352,348,348,352,356,360,364,
				372,376,384,400,404,412,420,428,432,436,439};

int[] i55w83sY = {437,433,426,420,402,381,379,377,370,363,358,344,326,320,319,
				317,316,315,315,316,321,326,334,342,352,370,380,388,393,396,
				401,403,406,406,405,402,397,389,383,376,368};

int[] i83n55wX = {462,463,464,465,467,470,475,481,488,492,504,512,520,528,532,
				536,536,534,532,530,528,524,420,412,372,332,313,306,302};

int[] i83n55wY = {400,404,408,412,416,424,432,436,440,442,442,440,436,428,420,
				410,398,394,390,385,382,377,319,313,291,269,259,256,254};

int[] i83n55eX = {468,469,470,471,472,473,474,476,481,484,488,493,498,505,513,
				522,530,539,548,555,560,564,566,566,566,566,566,567,568,570,
				575,580,584,588,592,596,600,604,608,612,616,620,624};

int[] i83n55eY = {100,104,108,112,116,120,132,140,152,160,168,176,184,192,200,
				208,216,224,232,240,248,256,264,280,293,306,324,332,336,345,
				355,363,370,376,380,384,388,392,396,400,404,408,412};

int[] i83s55eX = {443,442,441,440,440,439,437,433,425,418,410,396,388,382,377,
				374,370,369,368,368,370,375,376,380,384,484,488,492,500,512,
				524,548,570,584,588,592,596};

int[] i83s55eY = {252,248,244,240,228,224,216,208,200,196,193,193,196,200,204,
				208,216,220,224,236,240,248,252,255,260,316,320,322,327,334,
				340,355,369,378,380,382,384};

int[] i83s55wX = {436,434,433,432,432,430,429,428,427,424,420,417,412,406,400,
				392,383,374,366,357,350,344,340,338,337,337,337,336,335,334,
				333,330,327,323,318,313,306,302,292,288,284,280,276,272,268,264};

int[] i83s55wY = {532,528,524,520,516,508,500,496,492,484,476,468,460,452,444,
				436,428,420,412,404,396,388,380,372,368,356,344,340,324,312,
				304,296,288,280,272,266,258,254,247,244,241,238,235,232,229,226};

class Segment {
  string name;
  int[] x_array;
  int[] y_array;
  float total_length;
  int start_index;
  int end_index;


}

Segment[] segmentArray = new Segment[12];

class Car {
  string id;
  string currSegment;
  float distance;
  float speed;
}

Car[] carArray = new Car[10];

int lastUpdateTime = 0;
  
//For debugging paths-they're still a little crooked...
/*void mouseClicked()
{
    alert(mouseX, mouseY);
}*/

void setup()
{
	size(795, 575);
	bg = loadImage("Background.png");
	
	segmentArray[0] = new Segment;
	segmentArray[0].name = "i55E_1";
	segmentArray[0].x_array = i55Ex;
	segmentArray[0].y_array = i55Ey;
	segmentArray[0].start_index = 0;
	segmentArray[0].end_index = 197;

	segmentArray[1] = new Segment;
	segmentArray[1].name = "i55W_1";
	segmentArray[1].x_array = i55Wx;
	segmentArray[1].y_array = i55Wy;
	segmentArray[1].start_index = 0;
	segmentArray[1].end_index = 194;

	segmentArray[2] = new Segment;
	segmentArray[2].name = "i83N_1";
	segmentArray[2].x_array = i83Nx;
	segmentArray[2].y_array = i83Ny;
	segmentArray[2].start_index = 0;
	segmentArray[2].end_index = 144;

	segmentArray[3] = new Segment;
	segmentArray[3].name = "i83S_1";
	segmentArray[3].x_array = i83Sx;
	segmentArray[3].y_array = i83Sy;
	segmentArray[3].start_index = 0;
	segmentArray[3].end_index = 143;
	// TODO calculate length of segment for easy checking later

	carArray[0] = new Car;
	carArray[0].id = "Mario";
	carArray[0].currSegment = "i55E_1";
	carArray[0].distance = 5.0;
	carArray[0].speed = 5.0;

	carArray[1] = new Car;
	carArray[1].id = "Luigi";
	carArray[1].currSegment = "i55W_1";
	carArray[1].distance = 5.0;
	carArray[1].speed = 5.0;

	carArray[2] = new Car;
	carArray[2].id = "Yoshi";
	carArray[2].currSegment = "i83N_1";
	carArray[2].distance = 5.0;
	carArray[2].speed = 5.0;

	carArray[3] = new Car;
	carArray[3].id = "PrincessPeach";
	carArray[3].currSegment = "i83S_1";
	carArray[3].distance = 5.0;
	carArray[3].speed = 5.0;
}


float distance(x1, y1, x2, y2)
{
  return sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
}

void drawCar(Car c)
{
  Segment currSeg;
  
  for(int ii = 0; ii < 12; ii++)
  {
    if(segmentArray[ii] !== null)
    {
      if(c.currSegment == segmentArray[ii].name)
      {
        currSeg = segmentArray[ii];
      }
    }
  }
  
  float currDist = 0.0;
  float prevDist = 0.0;
  int currPoint = 0;
  
  //alert(currDist);
  //alert(c.distance);
  //alert(currPoint);
  //alert(currSeg.end_index);
  
  while(currDist < c.distance && currPoint < currSeg.end_index)
  {
    currDist += distance(currSeg.x_array[currPoint], currSeg.y_array[currPoint], currSeg.x_array[currPoint+1], currSeg.y_array[currPoint+1]);
    currPoint++;
    if(currDist < c.distance)
    {
      prevDist = currDist;
    }
  }
  
  if(currPoint == 0)
  {
    // negative or 0 distance for the car. ABORT!
    return;
  }
  
  //alert(c.distance + currPoint + ", " + prevDist + ", ");
  
  float distanceBetweenPoints = currDist - prevDist;
  float carBetweenPoints = c.distance - prevDist;
  float carFractionTravelled = carBetweenPoints / distanceBetweenPoints;
  
  
  
  float car_x = currSeg.x_array[currPoint -1]*(1-carFractionTravelled) + currSeg.x_array[currPoint]*carFractionTravelled;
  float car_y = currSeg.y_array[currPoint -1]*(1-carFractionTravelled) + currSeg.y_array[currPoint]*carFractionTravelled;
  
  
  //alert("prev point" + currSeg.x_array[currPoint -1] + ", " + currSeg.y_array[currPoint -1]);
  //alert("prev point" + currSeg.x_array[currPoint] + ", " + currSeg.y_array[currPoint]);
  //alert("car" + car_x + ", " + car_y);
  
		fill(255, 0, 0);
		noStroke();
		rect(car_x, 570-car_y-4, 5, 5);

}


void updateSimulation()
{
  int m = millis();

  if(m>lastUpdateTime+20)
  {
    lastUpdateTime = m;
    
    //TODO: Put this into a loop...DUH!
    carArray[0].distance += carArray[0].speed;
    if(carArray[0].distance >  1000) carArray[0].distance = 0.01;

    carArray[1].distance += carArray[1].speed;
    if(carArray[1].distance >  1000) carArray[1].distance = 0.01;

    carArray[2].distance += carArray[2].speed;
    if(carArray[2].distance >  1000) carArray[2].distance = 0.01;

    carArray[3].distance += carArray[3].speed;
    if(carArray[3].distance >  1000) carArray[3].distance = 0.01;
  }
}

void draw()
{
  updateSimulation();
  
	background(bg);

	// car paths for debugging...
	/*
	for(int i = 0; i<i55Ex.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i55Ex[i], 570-i55Ey[i]-4, 2, 2);
	}

	for(int i = 0; i<i55Wx.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i55Wx[i], 570-i55Wy[i]-4, 2, 2);
	}

	for(int i = 0; i<i83Nx.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i83Nx[i]+4, 570-i83Ny[i], 2, 2);
	}

	for(int i = 0; i<i83Sx.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i83Sx[i]+4, 570-i83Sy[i], 2, 2);
	}

	for(int i = 0; i<i55e83sX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i55e83sX[i], 570-i55e83sY[i]+2, 2, 2);
	}

	for(int i = 0; i<i55e83nX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i55e83nX[i], 570-i55e83nY[i]+2, 2, 2);
	}

	for(int i = 0; i<i55w83nX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i55w83nX[i], 570-i55w83nY[i]+2, 2, 2);
	}

	for(int i = 0; i<i55w83sX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i55w83sX[i], 570-i55w83sY[i]+2, 2, 2);
	}

	for(int i = 0; i<i83n55wX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i83n55wX[i], 570-i83n55wY[i]+2, 2, 2);
	}

	for(int i = 0; i<i83n55eX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i83n55eX[i], 570-i83n55eY[i]+2, 2, 2);
	}

	for(int i = 0; i<i83s55eX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i83s55eX[i], 570-i83s55eY[i]+2, 2, 2);
	}

	for(int i = 0; i<i83s55wX.length(); i++)
	{
		fill(0, 121, 184);
		noStroke();
		rect(i83s55wX[i], 570-i83s55wY[i]+2, 2, 2);
	}
	*/

  drawCar(carArray[0]);
  drawCar(carArray[1]);
  drawCar(carArray[2]);
  drawCar(carArray[3]);

}
