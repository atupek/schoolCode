#include <iostream>
#include <regex>
#include <string>
#include <iterator>
using std::cout;
using std::endl;
using std::string;
using std::regex;
using std::regex_match;
using std::smatch;
//using std::regex_replace;
using std::regex_search;
//using std::back_inserter;
//using std::iterator;
using std::regex_match;

int main()
{
	string line1 ("G1 X76.760 Y84.332 E3.55005 F540.000");
	//string line1 ("; generated by Slic3r 1.1.7 on 2015-01-18 at 14:51:23");
	//regex expr("(E)\\d+\\.\\d*");
	//regex expr("(\\x45[[:digit:]]+\\.[[:digit:]]{5})");
	regex expr("(\\x45\\d+\\.\\d{3}(\\d{2}))");
	//regex expr("\\b(G1)([^ ]*)");
	smatch match;

	/*if(regex_match(line1, expr))
	{
		cout << "It's in the string!" << endl;
	}
	else
	{
		cout << "Sorry, try again" << endl;
	}*/
	//regex_match (line,match,expr);
	
		if(!regex_search(line1, match, expr))
		{
			cout << "NO MATCH" << endl;
			cout << line1 << endl;
		}
		else
		{
		regex_search (line1,match,expr);
	    for (auto x:match) std::cout << x << " ";
	    std::cout << std::endl;
	    string line0 = match.str();
	    cout << endl << "line0: " << line0 << endl;
	    string prefix = match.prefix().str();
	    //cout << match.prefix().str() << endl;
			//cout << regex_replace(line, expr, "F") << endl;
	    cout << "prefix: " << prefix << endl;
	    string edited = match.str();
	    cout << "edited: " << edited << endl;
	    line1 = match.suffix().str();
	    cout << "line2: " << line1 << endl;
	    //cout << "line2: " << line2 << endl;
	    //string line3 = match.str();
	    //line[line.length()-1] = 9;
	    //line+='9';
	    edited.pop_back();
	    edited.pop_back();
	    edited+="99";
	    //cout << "line3: " << line3 << endl;
	    string result = prefix + edited + line1;
	    cout << "result: " << result << endl;
}
	    //string result;
	    //regex_replace (back_inserter(result), line.begin()-3, line.end(), expr, "$1");
	    //cout << result << endl;
	    //return 0;
	    //break;
	
	//return 0;
}
/*
int main ()
{
  std::string s ("there is a subsequence in the string\n");
  std::regex e ("\\b(sub)(sequence)([^ ]*)");   // matches words beginning by "sub"

  // using string/c-string (3) version:
  std::cout << std::regex_replace (s,e,"beer-$2");

  // with flags:
  std::cout << std::regex_replace (s,e,"$1 and $2");
  std::cout << std::endl;

  return 0;
}*/

	// regex_search example
/*
int main ()
{
  std::string s ("this subject has a submarine as a subsequence");
  std::smatch m;
  std::regex e ("\\b(sub)([^ ]*)");   // matches words beginning by "sub"

  std::cout << "Target sequence: " << s << std::endl;
  std::cout << "Regular expression: /\\b(sub)([^ ]*)/" << std::endl;
  std::cout << "The following matches and submatches were found:" << std::endl;

  while (std::regex_search (s,m,e)) {
    for (auto x:m) std::cout << x << " ";
    std::cout << std::endl;
    s = m.suffix().str();
  }

  return 0;
}*/




